$date
	Sun Feb  4 12:14:36 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module barrel_shifter_testbench $end
$var wire 4 ! dout [3:0] $end
$var reg 4 " din [3:0] $end
$var reg 1 # direction $end
$var reg 1 $ select $end
$var reg 2 % shift_value [1:0] $end
$scope module design_instance $end
$var wire 4 & din [3:0] $end
$var wire 1 # direction $end
$var wire 4 ' dout [3:0] $end
$var wire 1 $ select $end
$var wire 2 ( shift_value [1:0] $end
$var wire 4 ) stage2_mux_out [3:0] $end
$var wire 4 * stage1_mux_out [3:0] $end
$var reg 4 + my_din [3:0] $end
$var reg 4 , my_dout [3:0] $end
$var reg 4 - stage1_mux_in0 [3:0] $end
$var reg 4 . stage1_mux_in1 [3:0] $end
$var reg 4 / stage2_mux_in0 [3:0] $end
$var reg 4 0 stage2_mux_in1 [3:0] $end
$scope module firstStageBarrelMuxes[0] $end
$var wire 1 1 in0 $end
$var wire 1 2 in1 $end
$var wire 1 3 sel $end
$var reg 1 4 out $end
$upscope $end
$scope module firstStageBarrelMuxes[1] $end
$var wire 1 5 in0 $end
$var wire 1 6 in1 $end
$var wire 1 3 sel $end
$var reg 1 7 out $end
$upscope $end
$scope module firstStageBarrelMuxes[2] $end
$var wire 1 8 in0 $end
$var wire 1 9 in1 $end
$var wire 1 3 sel $end
$var reg 1 : out $end
$upscope $end
$scope module firstStageBarrelMuxes[3] $end
$var wire 1 ; in0 $end
$var wire 1 < in1 $end
$var wire 1 3 sel $end
$var reg 1 = out $end
$upscope $end
$scope module secondStageBarrelMuxes[0] $end
$var wire 1 > in0 $end
$var wire 1 ? in1 $end
$var wire 1 @ sel $end
$var reg 1 A out $end
$upscope $end
$scope module secondStageBarrelMuxes[1] $end
$var wire 1 B in0 $end
$var wire 1 C in1 $end
$var wire 1 @ sel $end
$var reg 1 D out $end
$upscope $end
$scope module secondStageBarrelMuxes[2] $end
$var wire 1 E in0 $end
$var wire 1 F in1 $end
$var wire 1 @ sel $end
$var reg 1 G out $end
$upscope $end
$scope module secondStageBarrelMuxes[3] $end
$var wire 1 H in0 $end
$var wire 1 I in1 $end
$var wire 1 @ sel $end
$var reg 1 J out $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
0J
0I
0H
0G
0F
0E
0D
0C
0B
0A
0@
0?
0>
0=
0<
0;
0:
09
08
07
06
05
04
03
02
01
b0 0
b0 /
b0 .
b0 -
b0 ,
b0 +
b0 *
b0 )
b0 (
b0 '
b0 &
b0 %
0$
0#
b0 "
b0 !
$end
#100
b100 !
b100 '
b100 ,
b100 )
1D
1C
1>
b100 0
b1000 /
b1000 *
14
19
11
b10 .
b1000 -
b1000 +
1@
b1000 "
b1000 &
b1 %
b1 (
#200
1G
1I
1E
0C
0>
b1 0
b10 /
b10 !
b10 '
b10 ,
04
b10 *
1:
0A
b10 )
0D
13
0@
b10 %
b10 (
#300
b1 !
b1 '
b1 ,
0G
b1 )
1J
1@
b11 %
b11 (
#400
0A
0I
0E
0C
0>
b0 0
b0 /
b0 !
b0 '
b0 ,
09
01
04
b0 *
0:
0G
b0 )
0J
b0 .
b0 -
b0 +
03
0@
b0 "
b0 &
b0 %
b0 (
1$
#500
b1101 !
b1101 '
b1101 ,
1J
1D
b1101 )
1A
1?
1H
1I
1E
1C
1>
b1101 0
b1011 /
1=
1:
b1011 *
14
19
16
12
1;
18
11
b1110 .
b1011 -
b1011 +
1@
b1011 "
b1011 &
b1 %
b1 (
#600
0J
0?
0H
1F
1B
b111 0
b1110 /
b1110 !
b1110 '
b1110 ,
17
b1110 *
0=
1D
b1110 )
1G
13
0@
b10 %
b10 (
#700
b111 !
b111 '
b111 ,
0A
b111 )
1J
1@
b11 %
b11 (
#800
0G
b0 !
b0 '
b0 ,
0I
0E
0C
0>
0D
0H
0F
0B
0:
04
b0 0
b0 /
09
06
02
0;
08
01
07
b0 *
0=
0A
b0 )
0J
b0 .
b0 -
b0 +
03
0@
b0 "
b0 &
b0 %
b0 (
1#
0$
#900
b10 !
b10 '
b10 ,
b100 )
1D
1C
1>
b100 0
b1000 /
b1000 *
14
19
11
b10 .
b1000 -
b1000 +
1@
b1 "
b1 &
b1 %
b1 (
#1000
1G
1I
1E
0C
0>
b1 0
b10 /
b100 !
b100 '
b100 ,
04
b10 *
1:
0A
b10 )
0D
13
0@
b10 %
b10 (
#1100
b1000 !
b1000 '
b1000 ,
0G
b1 )
1J
1@
b11 %
b11 (
#1200
0A
0I
0E
0C
0>
b0 0
b0 /
b0 !
b0 '
b0 ,
09
01
04
b0 *
0:
0G
b0 )
0J
b0 .
b0 -
b0 +
03
0@
b0 "
b0 &
b0 %
b0 (
1$
#1300
b111 !
b111 '
b111 ,
1G
1D
b1110 )
1A
1?
1H
1F
1B
1C
1>
b1110 0
b1101 /
1=
17
b1101 *
14
1<
19
16
1;
15
11
b111 .
b1101 -
b1101 +
1@
b1011 "
b1011 &
b1 %
b1 (
#1400
0A
1I
1E
0C
0>
b1011 0
b111 /
b1110 !
b1110 '
b1110 ,
04
b111 *
1:
1G
b111 )
1J
13
0@
b10 %
b10 (
#1500
b1101 !
b1101 '
b1101 ,
1A
b1011 )
0D
1@
b11 %
b11 (
#1600
b0 !
b0 '
b0 ,
0A
0J
b0 )
0G
0?
0I
0E
0F
0B
b0 0
b1 /
0:
b1 *
07
09
06
0;
01
b1 .
b100 -
b100 +
b100 "
b100 &
0#
0$
#1700
1#
#1800
